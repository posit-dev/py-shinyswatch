# Do not edit this file, please run `python scripts/update_themes.py`

"""
Targeted theme methods for all Bootswatch themes.
"""

from ._theme_shinyswatch import ShinyswatchTheme

cerulean = ShinyswatchTheme("cerulean")
"""
`cerulean` Bootswatch theme

Visit [https://bootswatch.com/cerulean/](https://bootswatch.com/cerulean/) to see
Bootswatch's demo of the `cerulean` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.cerulean)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (cerulean)
    theme.
"""


cosmo = ShinyswatchTheme("cosmo")
"""
`cosmo` Bootswatch theme

Visit [https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/) to see
Bootswatch's demo of the `cosmo` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.cosmo)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (cosmo)
    theme.
"""


cyborg = ShinyswatchTheme("cyborg")
"""
`cyborg` Bootswatch theme

Visit [https://bootswatch.com/cyborg/](https://bootswatch.com/cyborg/) to see
Bootswatch's demo of the `cyborg` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.cyborg)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (cyborg)
    theme.
"""


darkly = ShinyswatchTheme("darkly")
"""
`darkly` Bootswatch theme

Visit [https://bootswatch.com/darkly/](https://bootswatch.com/darkly/) to see
Bootswatch's demo of the `darkly` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.darkly)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (darkly)
    theme.
"""


flatly = ShinyswatchTheme("flatly")
"""
`flatly` Bootswatch theme

Visit [https://bootswatch.com/flatly/](https://bootswatch.com/flatly/) to see
Bootswatch's demo of the `flatly` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.flatly)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (flatly)
    theme.
"""


journal = ShinyswatchTheme("journal")
"""
`journal` Bootswatch theme

Visit [https://bootswatch.com/journal/](https://bootswatch.com/journal/) to see
Bootswatch's demo of the `journal` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.journal)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (journal)
    theme.
"""


litera = ShinyswatchTheme("litera")
"""
`litera` Bootswatch theme

Visit [https://bootswatch.com/litera/](https://bootswatch.com/litera/) to see
Bootswatch's demo of the `litera` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.litera)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (litera)
    theme.
"""


lumen = ShinyswatchTheme("lumen")
"""
`lumen` Bootswatch theme

Visit [https://bootswatch.com/lumen/](https://bootswatch.com/lumen/) to see
Bootswatch's demo of the `lumen` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.lumen)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (lumen)
    theme.
"""


lux = ShinyswatchTheme("lux")
"""
`lux` Bootswatch theme

Visit [https://bootswatch.com/lux/](https://bootswatch.com/lux/) to see
Bootswatch's demo of the `lux` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.lux)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (lux)
    theme.
"""


materia = ShinyswatchTheme("materia")
"""
`materia` Bootswatch theme

Visit [https://bootswatch.com/materia/](https://bootswatch.com/materia/) to see
Bootswatch's demo of the `materia` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.materia)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (materia)
    theme.
"""


minty = ShinyswatchTheme("minty")
"""
`minty` Bootswatch theme

Visit [https://bootswatch.com/minty/](https://bootswatch.com/minty/) to see
Bootswatch's demo of the `minty` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.minty)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (minty)
    theme.
"""


morph = ShinyswatchTheme("morph")
"""
`morph` Bootswatch theme

Visit [https://bootswatch.com/morph/](https://bootswatch.com/morph/) to see
Bootswatch's demo of the `morph` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.morph)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (morph)
    theme.
"""


pulse = ShinyswatchTheme("pulse")
"""
`pulse` Bootswatch theme

Visit [https://bootswatch.com/pulse/](https://bootswatch.com/pulse/) to see
Bootswatch's demo of the `pulse` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.pulse)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (pulse)
    theme.
"""


quartz = ShinyswatchTheme("quartz")
"""
`quartz` Bootswatch theme

Visit [https://bootswatch.com/quartz/](https://bootswatch.com/quartz/) to see
Bootswatch's demo of the `quartz` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.quartz)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (quartz)
    theme.
"""


sandstone = ShinyswatchTheme("sandstone")
"""
`sandstone` Bootswatch theme

Visit [https://bootswatch.com/sandstone/](https://bootswatch.com/sandstone/) to see
Bootswatch's demo of the `sandstone` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.sandstone)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (sandstone)
    theme.
"""


simplex = ShinyswatchTheme("simplex")
"""
`simplex` Bootswatch theme

Visit [https://bootswatch.com/simplex/](https://bootswatch.com/simplex/) to see
Bootswatch's demo of the `simplex` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.simplex)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (simplex)
    theme.
"""


sketchy = ShinyswatchTheme("sketchy")
"""
`sketchy` Bootswatch theme

Visit [https://bootswatch.com/sketchy/](https://bootswatch.com/sketchy/) to see
Bootswatch's demo of the `sketchy` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.sketchy)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (sketchy)
    theme.
"""


slate = ShinyswatchTheme("slate")
"""
`slate` Bootswatch theme

Visit [https://bootswatch.com/slate/](https://bootswatch.com/slate/) to see
Bootswatch's demo of the `slate` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.slate)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (slate)
    theme.
"""


solar = ShinyswatchTheme("solar")
"""
`solar` Bootswatch theme

Visit [https://bootswatch.com/solar/](https://bootswatch.com/solar/) to see
Bootswatch's demo of the `solar` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.solar)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (solar)
    theme.
"""


spacelab = ShinyswatchTheme("spacelab")
"""
`spacelab` Bootswatch theme

Visit [https://bootswatch.com/spacelab/](https://bootswatch.com/spacelab/) to see
Bootswatch's demo of the `spacelab` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.spacelab)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (spacelab)
    theme.
"""


superhero = ShinyswatchTheme("superhero")
"""
`superhero` Bootswatch theme

Visit [https://bootswatch.com/superhero/](https://bootswatch.com/superhero/) to see
Bootswatch's demo of the `superhero` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.superhero)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (superhero)
    theme.
"""


united = ShinyswatchTheme("united")
"""
`united` Bootswatch theme

Visit [https://bootswatch.com/united/](https://bootswatch.com/united/) to see
Bootswatch's demo of the `united` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.united)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (united)
    theme.
"""


vapor = ShinyswatchTheme("vapor")
"""
`vapor` Bootswatch theme

Visit [https://bootswatch.com/vapor/](https://bootswatch.com/vapor/) to see
Bootswatch's demo of the `vapor` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.vapor)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (vapor)
    theme.
"""


yeti = ShinyswatchTheme("yeti")
"""
`yeti` Bootswatch theme

Visit [https://bootswatch.com/yeti/](https://bootswatch.com/yeti/) to see
Bootswatch's demo of the `yeti` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.yeti)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (yeti)
    theme.
"""


zephyr = ShinyswatchTheme("zephyr")
"""
`zephyr` Bootswatch theme

Visit [https://bootswatch.com/zephyr/](https://bootswatch.com/zephyr/) to see
Bootswatch's demo of the `zephyr` theme.

This theme object is a subclass of :class:`~shiny.ui.Theme` and can be further
customized with the :class:`~shiny.ui.Theme` methods. Note that customizing Shiny
themes requires the [libsass package](https://sass.github.io/libsass-python/).

Examples
--------

Shinyswatch themes must be provided to the `theme` argument of any Shiny UI page
function, e.g. :func:`~shiny.ui.page_fluid` or :func:`~shiny.ui.page_sidebar`, or to
:func:`~shiny.express.ui.page_opts` in Shiny Express.

**Shiny Express**

```python
from shiny.express import ui
import shinyswatch

ui.page_opts(theme=shinyswatch.zephyr)
```

**Shiny Core**

```python
from shiny import App, render, ui

import shinyswatch

app_ui = ui.page_fluid(
    ui.input_slider("num", "Number:", min=10, max=100, value=30),
    ui.output_text_verbatim("slider_val"),
    theme=shinyswatch.theme.darkly,
)


def server(input):
    @render.text
    def slider_val():
        return f"{input.num()}"


app = App(app_ui, server)
```

Attributes
----------
name:
    Name of the theme.
colors:
    A class containing the color variables used in the theme.

Returns
-------
htmltools.HTMLDependency
    When called, returns an HTMLDependency of a full Shiny Bootswatch (zephyr)
    theme.
"""
