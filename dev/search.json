[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "shinyswatch",
    "section": "",
    "text": "Bootswatch + Bootstrap 5 themes for Shiny.\nHere are just three of the 25 themes in shinyswatch:\n\n\n\n\n\n\n\n\nMinty\nSketchy\nSuperhero\n\n\n\n\n\n\n\n\n\n\n\n\npip install shinyswatch\nTo install the latest development version from this repository:\npip install https://github.com/rstudio/py-shinyswatch/tarball/main\n\n\n\nTo use a theme, add a shinyswatch.theme theme object to your App’s UI definition.\n# Minty theme\nshinyswatch.theme.minty\n\n# Sketchy theme\nshinyswatch.theme.sketchy\n\n# Superhero theme\nshinyswatch.theme.superhero\nExample Shiny application:\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    shinyswatch.theme.darkly,\n    # Theme code - end\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nshiny\nshinyswatch\n\n\nNote: When writing shiny apps on shinylive.io, remember to add shinyswatch to your requirements.txt file!\n\n\n\n\nTo add a theme picker to your app, add the theme picker UI and server functions to your app’s UI and server definitions.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme picker - start\n    shinyswatch.theme_picker_ui(),\n    # Theme picker - end\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    ## Theme picker - start\n    shinyswatch.theme_picker_server()\n    ## Theme picker - end\n\n    @output\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nshiny\nshinyswatch\n\n\n\n\nshinyswatch themes include a .colors attribute that can be used to theme plots or other outputs and UI elements. In the example below, try changing the theme and re-running the app to see how the plot changes.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, req, ui\n\n# Try changing the theme from minty to united\nfrom shinyswatch.theme import minty as shiny_theme\n\napp_ui = ui.page_fluid(\n    shiny_theme,\n    ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n    ui.card(ui.output_plot(\"plot\"))\n)\n\n\ndef server(input):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True, color=shiny_theme.colors.primary)\n\n        # Theme the plot to match the current theme\n        fig.patch.set_facecolor(\"none\")\n        ax.set_facecolor(\"none\")\n\n        color_fg = shiny_theme.colors.body_color\n        ax.tick_params(axis=\"both\", colors=color_fg)\n        ax.spines[\"bottom\"].set_color(color_fg)\n        ax.spines[\"top\"].set_color(color_fg)\n        ax.spines[\"left\"].set_color(color_fg)\n        ax.spines[\"right\"].set_color(color_fg)\n\n        return fig\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nnumpy\nmatplotlib\nshiny\nshinyswatch"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "shinyswatch",
    "section": "",
    "text": "pip install shinyswatch\nTo install the latest development version from this repository:\npip install https://github.com/rstudio/py-shinyswatch/tarball/main"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "shinyswatch",
    "section": "",
    "text": "To use a theme, add a shinyswatch.theme theme object to your App’s UI definition.\n# Minty theme\nshinyswatch.theme.minty\n\n# Sketchy theme\nshinyswatch.theme.sketchy\n\n# Superhero theme\nshinyswatch.theme.superhero\nExample Shiny application:\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    shinyswatch.theme.darkly,\n    # Theme code - end\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nshiny\nshinyswatch\n\n\nNote: When writing shiny apps on shinylive.io, remember to add shinyswatch to your requirements.txt file!"
  },
  {
    "objectID": "index.html#theme-picker",
    "href": "index.html#theme-picker",
    "title": "shinyswatch",
    "section": "",
    "text": "To add a theme picker to your app, add the theme picker UI and server functions to your app’s UI and server definitions.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme picker - start\n    shinyswatch.theme_picker_ui(),\n    # Theme picker - end\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    ## Theme picker - start\n    shinyswatch.theme_picker_server()\n    ## Theme picker - end\n\n    @output\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nshiny\nshinyswatch"
  },
  {
    "objectID": "index.html#plot-theming",
    "href": "index.html#plot-theming",
    "title": "shinyswatch",
    "section": "",
    "text": "shinyswatch themes include a .colors attribute that can be used to theme plots or other outputs and UI elements. In the example below, try changing the theme and re-running the app to see how the plot changes.\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, req, ui\n\n# Try changing the theme from minty to united\nfrom shinyswatch.theme import minty as shiny_theme\n\napp_ui = ui.page_fluid(\n    shiny_theme,\n    ui.input_slider(\"n\", \"N\", min=0, max=100, value=20),\n    ui.card(ui.output_plot(\"plot\"))\n)\n\n\ndef server(input):\n    @render.plot(alt=\"A histogram\")\n    def plot():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n\n        fig, ax = plt.subplots()\n        ax.hist(x, input.n(), density=True, color=shiny_theme.colors.primary)\n\n        # Theme the plot to match the current theme\n        fig.patch.set_facecolor(\"none\")\n        ax.set_facecolor(\"none\")\n\n        color_fg = shiny_theme.colors.body_color\n        ax.tick_params(axis=\"both\", colors=color_fg)\n        ax.spines[\"bottom\"].set_color(color_fg)\n        ax.spines[\"top\"].set_color(color_fg)\n        ax.spines[\"left\"].set_color(color_fg)\n        ax.spines[\"right\"].set_color(color_fg)\n\n        return fig\n\n\napp = App(app_ui, server)\n\n## file: requirements.txt\nnumpy\nmatplotlib\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.journal.html",
    "href": "reference/theme.journal.html",
    "title": "theme.journal",
    "section": "",
    "text": "theme.journal\njournal Bootswatch theme\nVisit https://bootswatch.com/journal/ to see Bootswatch's demo of the journal theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.journal)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (journal) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.journal,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.journal"
    ]
  },
  {
    "objectID": "reference/theme.journal.html#examples",
    "href": "reference/theme.journal.html#examples",
    "title": "theme.journal",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.journal)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.journal"
    ]
  },
  {
    "objectID": "reference/theme.journal.html#attributes",
    "href": "reference/theme.journal.html#attributes",
    "title": "theme.journal",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.journal"
    ]
  },
  {
    "objectID": "reference/theme.journal.html#returns",
    "href": "reference/theme.journal.html#returns",
    "title": "theme.journal",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (journal) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.journal"
    ]
  },
  {
    "objectID": "reference/theme.journal.html#examples-1",
    "href": "reference/theme.journal.html#examples-1",
    "title": "theme.journal",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.journal,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.journal"
    ]
  },
  {
    "objectID": "reference/theme.yeti.html",
    "href": "reference/theme.yeti.html",
    "title": "theme.yeti",
    "section": "",
    "text": "theme.yeti\nyeti Bootswatch theme\nVisit https://bootswatch.com/yeti/ to see Bootswatch's demo of the yeti theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.yeti)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (yeti) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.yeti,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.yeti"
    ]
  },
  {
    "objectID": "reference/theme.yeti.html#examples",
    "href": "reference/theme.yeti.html#examples",
    "title": "theme.yeti",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.yeti)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.yeti"
    ]
  },
  {
    "objectID": "reference/theme.yeti.html#attributes",
    "href": "reference/theme.yeti.html#attributes",
    "title": "theme.yeti",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.yeti"
    ]
  },
  {
    "objectID": "reference/theme.yeti.html#returns",
    "href": "reference/theme.yeti.html#returns",
    "title": "theme.yeti",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (yeti) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.yeti"
    ]
  },
  {
    "objectID": "reference/theme.yeti.html#examples-1",
    "href": "reference/theme.yeti.html#examples-1",
    "title": "theme.yeti",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.yeti,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.yeti"
    ]
  },
  {
    "objectID": "reference/theme.flatly.html",
    "href": "reference/theme.flatly.html",
    "title": "theme.flatly",
    "section": "",
    "text": "theme.flatly\nflatly Bootswatch theme\nVisit https://bootswatch.com/flatly/ to see Bootswatch's demo of the flatly theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.flatly)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (flatly) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.flatly,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.flatly"
    ]
  },
  {
    "objectID": "reference/theme.flatly.html#examples",
    "href": "reference/theme.flatly.html#examples",
    "title": "theme.flatly",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.flatly)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.flatly"
    ]
  },
  {
    "objectID": "reference/theme.flatly.html#attributes",
    "href": "reference/theme.flatly.html#attributes",
    "title": "theme.flatly",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.flatly"
    ]
  },
  {
    "objectID": "reference/theme.flatly.html#returns",
    "href": "reference/theme.flatly.html#returns",
    "title": "theme.flatly",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (flatly) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.flatly"
    ]
  },
  {
    "objectID": "reference/theme.flatly.html#examples-1",
    "href": "reference/theme.flatly.html#examples-1",
    "title": "theme.flatly",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.flatly,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.flatly"
    ]
  },
  {
    "objectID": "reference/theme.vapor.html",
    "href": "reference/theme.vapor.html",
    "title": "theme.vapor",
    "section": "",
    "text": "theme.vapor\nvapor Bootswatch theme\nVisit https://bootswatch.com/vapor/ to see Bootswatch's demo of the vapor theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.vapor)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (vapor) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.vapor,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.vapor"
    ]
  },
  {
    "objectID": "reference/theme.vapor.html#examples",
    "href": "reference/theme.vapor.html#examples",
    "title": "theme.vapor",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.vapor)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.vapor"
    ]
  },
  {
    "objectID": "reference/theme.vapor.html#attributes",
    "href": "reference/theme.vapor.html#attributes",
    "title": "theme.vapor",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.vapor"
    ]
  },
  {
    "objectID": "reference/theme.vapor.html#returns",
    "href": "reference/theme.vapor.html#returns",
    "title": "theme.vapor",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (vapor) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.vapor"
    ]
  },
  {
    "objectID": "reference/theme.vapor.html#examples-1",
    "href": "reference/theme.vapor.html#examples-1",
    "title": "theme.vapor",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.vapor,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.vapor"
    ]
  },
  {
    "objectID": "reference/theme.pulse.html",
    "href": "reference/theme.pulse.html",
    "title": "theme.pulse",
    "section": "",
    "text": "theme.pulse\npulse Bootswatch theme\nVisit https://bootswatch.com/pulse/ to see Bootswatch's demo of the pulse theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.pulse)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (pulse) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.pulse,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.pulse"
    ]
  },
  {
    "objectID": "reference/theme.pulse.html#examples",
    "href": "reference/theme.pulse.html#examples",
    "title": "theme.pulse",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.pulse)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.pulse"
    ]
  },
  {
    "objectID": "reference/theme.pulse.html#attributes",
    "href": "reference/theme.pulse.html#attributes",
    "title": "theme.pulse",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.pulse"
    ]
  },
  {
    "objectID": "reference/theme.pulse.html#returns",
    "href": "reference/theme.pulse.html#returns",
    "title": "theme.pulse",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (pulse) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.pulse"
    ]
  },
  {
    "objectID": "reference/theme.pulse.html#examples-1",
    "href": "reference/theme.pulse.html#examples-1",
    "title": "theme.pulse",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.pulse,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.pulse"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Generic method to retrieve a Bootswatch + Bootstrap 5 theme.\n\n\n\nget_theme\nGet a Bootstrap 5 Bootswatch theme for Shiny.\n\n\n\n\n\n\nAdds a drop down menu to your app to set and select a bootswatch theme.\n\n\n\ntheme_picker_ui\nTheme picker - UI\n\n\ntheme_picker_server\nTheme picker - Server\n\n\n\n\n\n\nFunctions that return a specific bootswatch theme.\n\n\n\ntheme.cerulean\ncerulean Bootswatch theme\n\n\ntheme.cosmo\ncosmo Bootswatch theme\n\n\ntheme.cyborg\ncyborg Bootswatch theme\n\n\ntheme.darkly\ndarkly Bootswatch theme\n\n\ntheme.flatly\nflatly Bootswatch theme\n\n\ntheme.journal\njournal Bootswatch theme\n\n\ntheme.litera\nlitera Bootswatch theme\n\n\ntheme.lumen\nlumen Bootswatch theme\n\n\ntheme.lux\nlux Bootswatch theme\n\n\ntheme.materia\nmateria Bootswatch theme\n\n\ntheme.minty\nminty Bootswatch theme\n\n\ntheme.morph\nmorph Bootswatch theme\n\n\ntheme.pulse\npulse Bootswatch theme\n\n\ntheme.quartz\nquartz Bootswatch theme\n\n\ntheme.sandstone\nsandstone Bootswatch theme\n\n\ntheme.simplex\nsimplex Bootswatch theme\n\n\ntheme.sketchy\nsketchy Bootswatch theme\n\n\ntheme.slate\nslate Bootswatch theme\n\n\ntheme.solar\nsolar Bootswatch theme\n\n\ntheme.spacelab\nspacelab Bootswatch theme\n\n\ntheme.superhero\nsuperhero Bootswatch theme\n\n\ntheme.united\nunited Bootswatch theme\n\n\ntheme.vapor\nvapor Bootswatch theme\n\n\ntheme.yeti\nyeti Bootswatch theme\n\n\ntheme.zephyr\nzephyr Bootswatch theme",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#get-a-theme",
    "href": "reference/index.html#get-a-theme",
    "title": "Function reference",
    "section": "",
    "text": "Generic method to retrieve a Bootswatch + Bootstrap 5 theme.\n\n\n\nget_theme\nGet a Bootstrap 5 Bootswatch theme for Shiny.",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#theme-picker",
    "href": "reference/index.html#theme-picker",
    "title": "Function reference",
    "section": "",
    "text": "Adds a drop down menu to your app to set and select a bootswatch theme.\n\n\n\ntheme_picker_ui\nTheme picker - UI\n\n\ntheme_picker_server\nTheme picker - Server",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#themes",
    "href": "reference/index.html#themes",
    "title": "Function reference",
    "section": "",
    "text": "Functions that return a specific bootswatch theme.\n\n\n\ntheme.cerulean\ncerulean Bootswatch theme\n\n\ntheme.cosmo\ncosmo Bootswatch theme\n\n\ntheme.cyborg\ncyborg Bootswatch theme\n\n\ntheme.darkly\ndarkly Bootswatch theme\n\n\ntheme.flatly\nflatly Bootswatch theme\n\n\ntheme.journal\njournal Bootswatch theme\n\n\ntheme.litera\nlitera Bootswatch theme\n\n\ntheme.lumen\nlumen Bootswatch theme\n\n\ntheme.lux\nlux Bootswatch theme\n\n\ntheme.materia\nmateria Bootswatch theme\n\n\ntheme.minty\nminty Bootswatch theme\n\n\ntheme.morph\nmorph Bootswatch theme\n\n\ntheme.pulse\npulse Bootswatch theme\n\n\ntheme.quartz\nquartz Bootswatch theme\n\n\ntheme.sandstone\nsandstone Bootswatch theme\n\n\ntheme.simplex\nsimplex Bootswatch theme\n\n\ntheme.sketchy\nsketchy Bootswatch theme\n\n\ntheme.slate\nslate Bootswatch theme\n\n\ntheme.solar\nsolar Bootswatch theme\n\n\ntheme.spacelab\nspacelab Bootswatch theme\n\n\ntheme.superhero\nsuperhero Bootswatch theme\n\n\ntheme.united\nunited Bootswatch theme\n\n\ntheme.vapor\nvapor Bootswatch theme\n\n\ntheme.yeti\nyeti Bootswatch theme\n\n\ntheme.zephyr\nzephyr Bootswatch theme",
    "crumbs": [
      "Reference",
      "Function reference"
    ]
  },
  {
    "objectID": "reference/theme.cyborg.html",
    "href": "reference/theme.cyborg.html",
    "title": "theme.cyborg",
    "section": "",
    "text": "theme.cyborg\ncyborg Bootswatch theme\nVisit https://bootswatch.com/cyborg/ to see Bootswatch's demo of the cyborg theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.cyborg)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (cyborg) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.cyborg,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cyborg"
    ]
  },
  {
    "objectID": "reference/theme.cyborg.html#examples",
    "href": "reference/theme.cyborg.html#examples",
    "title": "theme.cyborg",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.cyborg)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cyborg"
    ]
  },
  {
    "objectID": "reference/theme.cyborg.html#attributes",
    "href": "reference/theme.cyborg.html#attributes",
    "title": "theme.cyborg",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cyborg"
    ]
  },
  {
    "objectID": "reference/theme.cyborg.html#returns",
    "href": "reference/theme.cyborg.html#returns",
    "title": "theme.cyborg",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (cyborg) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cyborg"
    ]
  },
  {
    "objectID": "reference/theme.cyborg.html#examples-1",
    "href": "reference/theme.cyborg.html#examples-1",
    "title": "theme.cyborg",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.cyborg,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cyborg"
    ]
  },
  {
    "objectID": "reference/theme.lumen.html",
    "href": "reference/theme.lumen.html",
    "title": "theme.lumen",
    "section": "",
    "text": "theme.lumen\nlumen Bootswatch theme\nVisit https://bootswatch.com/lumen/ to see Bootswatch's demo of the lumen theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.lumen)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (lumen) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.lumen,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lumen"
    ]
  },
  {
    "objectID": "reference/theme.lumen.html#examples",
    "href": "reference/theme.lumen.html#examples",
    "title": "theme.lumen",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.lumen)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lumen"
    ]
  },
  {
    "objectID": "reference/theme.lumen.html#attributes",
    "href": "reference/theme.lumen.html#attributes",
    "title": "theme.lumen",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lumen"
    ]
  },
  {
    "objectID": "reference/theme.lumen.html#returns",
    "href": "reference/theme.lumen.html#returns",
    "title": "theme.lumen",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (lumen) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lumen"
    ]
  },
  {
    "objectID": "reference/theme.lumen.html#examples-1",
    "href": "reference/theme.lumen.html#examples-1",
    "title": "theme.lumen",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.lumen,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lumen"
    ]
  },
  {
    "objectID": "reference/theme.cosmo.html",
    "href": "reference/theme.cosmo.html",
    "title": "theme.cosmo",
    "section": "",
    "text": "theme.cosmo\ncosmo Bootswatch theme\nVisit https://bootswatch.com/cosmo/ to see Bootswatch's demo of the cosmo theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.cosmo)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (cosmo) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.cosmo,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cosmo"
    ]
  },
  {
    "objectID": "reference/theme.cosmo.html#examples",
    "href": "reference/theme.cosmo.html#examples",
    "title": "theme.cosmo",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.cosmo)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cosmo"
    ]
  },
  {
    "objectID": "reference/theme.cosmo.html#attributes",
    "href": "reference/theme.cosmo.html#attributes",
    "title": "theme.cosmo",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cosmo"
    ]
  },
  {
    "objectID": "reference/theme.cosmo.html#returns",
    "href": "reference/theme.cosmo.html#returns",
    "title": "theme.cosmo",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (cosmo) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cosmo"
    ]
  },
  {
    "objectID": "reference/theme.cosmo.html#examples-1",
    "href": "reference/theme.cosmo.html#examples-1",
    "title": "theme.cosmo",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.cosmo,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cosmo"
    ]
  },
  {
    "objectID": "reference/theme.quartz.html",
    "href": "reference/theme.quartz.html",
    "title": "theme.quartz",
    "section": "",
    "text": "theme.quartz\nquartz Bootswatch theme\nVisit https://bootswatch.com/quartz/ to see Bootswatch's demo of the quartz theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.quartz)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (quartz) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.quartz,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.quartz"
    ]
  },
  {
    "objectID": "reference/theme.quartz.html#examples",
    "href": "reference/theme.quartz.html#examples",
    "title": "theme.quartz",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.quartz)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.quartz"
    ]
  },
  {
    "objectID": "reference/theme.quartz.html#attributes",
    "href": "reference/theme.quartz.html#attributes",
    "title": "theme.quartz",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.quartz"
    ]
  },
  {
    "objectID": "reference/theme.quartz.html#returns",
    "href": "reference/theme.quartz.html#returns",
    "title": "theme.quartz",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (quartz) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.quartz"
    ]
  },
  {
    "objectID": "reference/theme.quartz.html#examples-1",
    "href": "reference/theme.quartz.html#examples-1",
    "title": "theme.quartz",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.quartz,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.quartz"
    ]
  },
  {
    "objectID": "reference/get_theme.html",
    "href": "reference/get_theme.html",
    "title": "get_theme",
    "section": "",
    "text": "get_theme(name)\nGet a Bootstrap 5 Bootswatch theme for Shiny.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nBSW5_THEME_NAME\nA Bootswatch theme name.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nShinyswatchTheme\nA Bootswatch and Bootstrap 5 theme for Shiny.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.get_theme(\"superhero\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Get a theme",
      "get_theme"
    ]
  },
  {
    "objectID": "reference/get_theme.html#parameters",
    "href": "reference/get_theme.html#parameters",
    "title": "get_theme",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nBSW5_THEME_NAME\nA Bootswatch theme name.\nrequired",
    "crumbs": [
      "Reference",
      "Get a theme",
      "get_theme"
    ]
  },
  {
    "objectID": "reference/get_theme.html#returns",
    "href": "reference/get_theme.html#returns",
    "title": "get_theme",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nShinyswatchTheme\nA Bootswatch and Bootstrap 5 theme for Shiny.",
    "crumbs": [
      "Reference",
      "Get a theme",
      "get_theme"
    ]
  },
  {
    "objectID": "reference/get_theme.html#examples",
    "href": "reference/get_theme.html#examples",
    "title": "get_theme",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.get_theme(\"superhero\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Get a theme",
      "get_theme"
    ]
  },
  {
    "objectID": "reference/theme_picker_ui.html",
    "href": "reference/theme_picker_ui.html",
    "title": "theme_picker_ui",
    "section": "",
    "text": "theme_picker_ui(default=DEPRECATED)\nTheme picker - UI\nAdd this to your UI to enable the theme picker. Adds a input_select for users to choose a shinyswatch theme. This function requires theme_picker_server to be included in your server function.\n\n\n\nSet the initial theme by providing an initial shinyswatch theme to the theme argument of a Shiny page function, e.g. page_sidebar.\nDo not include more than one theme picker in your app.\nDo not call the theme picker UI / server inside a module.\n\n\n\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        shinyswatch.theme_picker_ui(),\n        # Other input controls in the sidebar...\n    ),\n    # Your main app content...\n    title=\"Shiny Sidebar Page\",\n    theme=shinyswatch.theme.minty, # Initial (optional) app theme\n)\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndefault\nDEPRECATED_PARAM\nDeprecated. Please use the theme argument of a Shiny page function to set the initial theme.\nDEPRECATED\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nui.TagChild\nA UI element creating the theme picker.\n\n\n\n\n\n\n\nshinyswatch.theme_picker_server\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav_panel(\n                        \"Tab 1\",\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav_panel(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav_panel(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    sidebar=ui.sidebar(\n        \"Sidebar content\",\n        shinyswatch.theme_picker_ui(),\n    ),\n    title=\"shinyswatch\",\n    inverse=True,\n    theme=shinyswatch.theme.superhero,\n)\n\n\ndef server(input, output, session):\n    # Include theme_picker_server server in the root of your server function\n    shinyswatch.theme_picker_server()\n\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_ui"
    ]
  },
  {
    "objectID": "reference/theme_picker_ui.html#notes",
    "href": "reference/theme_picker_ui.html#notes",
    "title": "theme_picker_ui",
    "section": "",
    "text": "Set the initial theme by providing an initial shinyswatch theme to the theme argument of a Shiny page function, e.g. page_sidebar.\nDo not include more than one theme picker in your app.\nDo not call the theme picker UI / server inside a module.",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_ui"
    ]
  },
  {
    "objectID": "reference/theme_picker_ui.html#examples",
    "href": "reference/theme_picker_ui.html#examples",
    "title": "theme_picker_ui",
    "section": "",
    "text": "app_ui = ui.page_sidebar(\n    ui.sidebar(\n        shinyswatch.theme_picker_ui(),\n        # Other input controls in the sidebar...\n    ),\n    # Your main app content...\n    title=\"Shiny Sidebar Page\",\n    theme=shinyswatch.theme.minty, # Initial (optional) app theme\n)",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_ui"
    ]
  },
  {
    "objectID": "reference/theme_picker_ui.html#parameters",
    "href": "reference/theme_picker_ui.html#parameters",
    "title": "theme_picker_ui",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndefault\nDEPRECATED_PARAM\nDeprecated. Please use the theme argument of a Shiny page function to set the initial theme.\nDEPRECATED",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_ui"
    ]
  },
  {
    "objectID": "reference/theme_picker_ui.html#returns",
    "href": "reference/theme_picker_ui.html#returns",
    "title": "theme_picker_ui",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nui.TagChild\nA UI element creating the theme picker.",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_ui"
    ]
  },
  {
    "objectID": "reference/theme_picker_ui.html#see-also",
    "href": "reference/theme_picker_ui.html#see-also",
    "title": "theme_picker_ui",
    "section": "",
    "text": "shinyswatch.theme_picker_server",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_ui"
    ]
  },
  {
    "objectID": "reference/theme_picker_ui.html#examples-1",
    "href": "reference/theme_picker_ui.html#examples-1",
    "title": "theme_picker_ui",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav_panel(\n                        \"Tab 1\",\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav_panel(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav_panel(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    sidebar=ui.sidebar(\n        \"Sidebar content\",\n        shinyswatch.theme_picker_ui(),\n    ),\n    title=\"shinyswatch\",\n    inverse=True,\n    theme=shinyswatch.theme.superhero,\n)\n\n\ndef server(input, output, session):\n    # Include theme_picker_server server in the root of your server function\n    shinyswatch.theme_picker_server()\n\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_ui"
    ]
  },
  {
    "objectID": "reference/theme.superhero.html",
    "href": "reference/theme.superhero.html",
    "title": "theme.superhero",
    "section": "",
    "text": "theme.superhero\nsuperhero Bootswatch theme\nVisit https://bootswatch.com/superhero/ to see Bootswatch's demo of the superhero theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.superhero)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (superhero) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.superhero,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.superhero"
    ]
  },
  {
    "objectID": "reference/theme.superhero.html#examples",
    "href": "reference/theme.superhero.html#examples",
    "title": "theme.superhero",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.superhero)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.superhero"
    ]
  },
  {
    "objectID": "reference/theme.superhero.html#attributes",
    "href": "reference/theme.superhero.html#attributes",
    "title": "theme.superhero",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.superhero"
    ]
  },
  {
    "objectID": "reference/theme.superhero.html#returns",
    "href": "reference/theme.superhero.html#returns",
    "title": "theme.superhero",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (superhero) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.superhero"
    ]
  },
  {
    "objectID": "reference/theme.superhero.html#examples-1",
    "href": "reference/theme.superhero.html#examples-1",
    "title": "theme.superhero",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.superhero,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.superhero"
    ]
  },
  {
    "objectID": "reference/theme.united.html",
    "href": "reference/theme.united.html",
    "title": "theme.united",
    "section": "",
    "text": "theme.united\nunited Bootswatch theme\nVisit https://bootswatch.com/united/ to see Bootswatch's demo of the united theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.united)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (united) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.united,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.united"
    ]
  },
  {
    "objectID": "reference/theme.united.html#examples",
    "href": "reference/theme.united.html#examples",
    "title": "theme.united",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.united)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.united"
    ]
  },
  {
    "objectID": "reference/theme.united.html#attributes",
    "href": "reference/theme.united.html#attributes",
    "title": "theme.united",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.united"
    ]
  },
  {
    "objectID": "reference/theme.united.html#returns",
    "href": "reference/theme.united.html#returns",
    "title": "theme.united",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (united) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.united"
    ]
  },
  {
    "objectID": "reference/theme.united.html#examples-1",
    "href": "reference/theme.united.html#examples-1",
    "title": "theme.united",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.united,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.united"
    ]
  },
  {
    "objectID": "reference/theme.cerulean.html",
    "href": "reference/theme.cerulean.html",
    "title": "theme.cerulean",
    "section": "",
    "text": "theme.cerulean\ncerulean Bootswatch theme\nVisit https://bootswatch.com/cerulean/ to see Bootswatch's demo of the cerulean theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.cerulean)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (cerulean) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.cerulean,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cerulean"
    ]
  },
  {
    "objectID": "reference/theme.cerulean.html#examples",
    "href": "reference/theme.cerulean.html#examples",
    "title": "theme.cerulean",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.cerulean)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cerulean"
    ]
  },
  {
    "objectID": "reference/theme.cerulean.html#attributes",
    "href": "reference/theme.cerulean.html#attributes",
    "title": "theme.cerulean",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cerulean"
    ]
  },
  {
    "objectID": "reference/theme.cerulean.html#returns",
    "href": "reference/theme.cerulean.html#returns",
    "title": "theme.cerulean",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (cerulean) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cerulean"
    ]
  },
  {
    "objectID": "reference/theme.cerulean.html#examples-1",
    "href": "reference/theme.cerulean.html#examples-1",
    "title": "theme.cerulean",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.cerulean,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.cerulean"
    ]
  },
  {
    "objectID": "reference/theme.solar.html",
    "href": "reference/theme.solar.html",
    "title": "theme.solar",
    "section": "",
    "text": "theme.solar\nsolar Bootswatch theme\nVisit https://bootswatch.com/solar/ to see Bootswatch's demo of the solar theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.solar)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (solar) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.solar,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.solar"
    ]
  },
  {
    "objectID": "reference/theme.solar.html#examples",
    "href": "reference/theme.solar.html#examples",
    "title": "theme.solar",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.solar)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.solar"
    ]
  },
  {
    "objectID": "reference/theme.solar.html#attributes",
    "href": "reference/theme.solar.html#attributes",
    "title": "theme.solar",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.solar"
    ]
  },
  {
    "objectID": "reference/theme.solar.html#returns",
    "href": "reference/theme.solar.html#returns",
    "title": "theme.solar",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (solar) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.solar"
    ]
  },
  {
    "objectID": "reference/theme.solar.html#examples-1",
    "href": "reference/theme.solar.html#examples-1",
    "title": "theme.solar",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.solar,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.solar"
    ]
  },
  {
    "objectID": "reference/theme.lux.html",
    "href": "reference/theme.lux.html",
    "title": "theme.lux",
    "section": "",
    "text": "theme.lux\nlux Bootswatch theme\nVisit https://bootswatch.com/lux/ to see Bootswatch's demo of the lux theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.lux)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (lux) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.lux,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lux"
    ]
  },
  {
    "objectID": "reference/theme.lux.html#examples",
    "href": "reference/theme.lux.html#examples",
    "title": "theme.lux",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.lux)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lux"
    ]
  },
  {
    "objectID": "reference/theme.lux.html#attributes",
    "href": "reference/theme.lux.html#attributes",
    "title": "theme.lux",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lux"
    ]
  },
  {
    "objectID": "reference/theme.lux.html#returns",
    "href": "reference/theme.lux.html#returns",
    "title": "theme.lux",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (lux) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lux"
    ]
  },
  {
    "objectID": "reference/theme.lux.html#examples-1",
    "href": "reference/theme.lux.html#examples-1",
    "title": "theme.lux",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.lux,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.lux"
    ]
  },
  {
    "objectID": "reference/theme.zephyr.html",
    "href": "reference/theme.zephyr.html",
    "title": "theme.zephyr",
    "section": "",
    "text": "theme.zephyr\nzephyr Bootswatch theme\nVisit https://bootswatch.com/zephyr/ to see Bootswatch's demo of the zephyr theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.zephyr)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (zephyr) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.zephyr,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.zephyr"
    ]
  },
  {
    "objectID": "reference/theme.zephyr.html#examples",
    "href": "reference/theme.zephyr.html#examples",
    "title": "theme.zephyr",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.zephyr)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.zephyr"
    ]
  },
  {
    "objectID": "reference/theme.zephyr.html#attributes",
    "href": "reference/theme.zephyr.html#attributes",
    "title": "theme.zephyr",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.zephyr"
    ]
  },
  {
    "objectID": "reference/theme.zephyr.html#returns",
    "href": "reference/theme.zephyr.html#returns",
    "title": "theme.zephyr",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (zephyr) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.zephyr"
    ]
  },
  {
    "objectID": "reference/theme.zephyr.html#examples-1",
    "href": "reference/theme.zephyr.html#examples-1",
    "title": "theme.zephyr",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.zephyr,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.zephyr"
    ]
  },
  {
    "objectID": "reference/theme.slate.html",
    "href": "reference/theme.slate.html",
    "title": "theme.slate",
    "section": "",
    "text": "theme.slate\nslate Bootswatch theme\nVisit https://bootswatch.com/slate/ to see Bootswatch's demo of the slate theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.slate)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (slate) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.slate,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.slate"
    ]
  },
  {
    "objectID": "reference/theme.slate.html#examples",
    "href": "reference/theme.slate.html#examples",
    "title": "theme.slate",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.slate)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.slate"
    ]
  },
  {
    "objectID": "reference/theme.slate.html#attributes",
    "href": "reference/theme.slate.html#attributes",
    "title": "theme.slate",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.slate"
    ]
  },
  {
    "objectID": "reference/theme.slate.html#returns",
    "href": "reference/theme.slate.html#returns",
    "title": "theme.slate",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (slate) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.slate"
    ]
  },
  {
    "objectID": "reference/theme.slate.html#examples-1",
    "href": "reference/theme.slate.html#examples-1",
    "title": "theme.slate",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.slate,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.slate"
    ]
  },
  {
    "objectID": "reference/theme.minty.html",
    "href": "reference/theme.minty.html",
    "title": "theme.minty",
    "section": "",
    "text": "theme.minty\nminty Bootswatch theme\nVisit https://bootswatch.com/minty/ to see Bootswatch's demo of the minty theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.minty)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (minty) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.minty,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.minty"
    ]
  },
  {
    "objectID": "reference/theme.minty.html#examples",
    "href": "reference/theme.minty.html#examples",
    "title": "theme.minty",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.minty)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.minty"
    ]
  },
  {
    "objectID": "reference/theme.minty.html#attributes",
    "href": "reference/theme.minty.html#attributes",
    "title": "theme.minty",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.minty"
    ]
  },
  {
    "objectID": "reference/theme.minty.html#returns",
    "href": "reference/theme.minty.html#returns",
    "title": "theme.minty",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (minty) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.minty"
    ]
  },
  {
    "objectID": "reference/theme.minty.html#examples-1",
    "href": "reference/theme.minty.html#examples-1",
    "title": "theme.minty",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.minty,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.minty"
    ]
  },
  {
    "objectID": "reference/theme.darkly.html",
    "href": "reference/theme.darkly.html",
    "title": "theme.darkly",
    "section": "",
    "text": "theme.darkly\ndarkly Bootswatch theme\nVisit https://bootswatch.com/darkly/ to see Bootswatch's demo of the darkly theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.darkly)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (darkly) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.darkly"
    ]
  },
  {
    "objectID": "reference/theme.darkly.html#examples",
    "href": "reference/theme.darkly.html#examples",
    "title": "theme.darkly",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.darkly)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.darkly"
    ]
  },
  {
    "objectID": "reference/theme.darkly.html#attributes",
    "href": "reference/theme.darkly.html#attributes",
    "title": "theme.darkly",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.darkly"
    ]
  },
  {
    "objectID": "reference/theme.darkly.html#returns",
    "href": "reference/theme.darkly.html#returns",
    "title": "theme.darkly",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (darkly) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.darkly"
    ]
  },
  {
    "objectID": "reference/theme.darkly.html#examples-1",
    "href": "reference/theme.darkly.html#examples-1",
    "title": "theme.darkly",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.darkly"
    ]
  },
  {
    "objectID": "reference/theme.litera.html",
    "href": "reference/theme.litera.html",
    "title": "theme.litera",
    "section": "",
    "text": "theme.litera\nlitera Bootswatch theme\nVisit https://bootswatch.com/litera/ to see Bootswatch's demo of the litera theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.litera)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (litera) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.litera,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.litera"
    ]
  },
  {
    "objectID": "reference/theme.litera.html#examples",
    "href": "reference/theme.litera.html#examples",
    "title": "theme.litera",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.litera)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.litera"
    ]
  },
  {
    "objectID": "reference/theme.litera.html#attributes",
    "href": "reference/theme.litera.html#attributes",
    "title": "theme.litera",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.litera"
    ]
  },
  {
    "objectID": "reference/theme.litera.html#returns",
    "href": "reference/theme.litera.html#returns",
    "title": "theme.litera",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (litera) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.litera"
    ]
  },
  {
    "objectID": "reference/theme.litera.html#examples-1",
    "href": "reference/theme.litera.html#examples-1",
    "title": "theme.litera",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.litera,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.litera"
    ]
  },
  {
    "objectID": "reference/theme.sketchy.html",
    "href": "reference/theme.sketchy.html",
    "title": "theme.sketchy",
    "section": "",
    "text": "theme.sketchy\nsketchy Bootswatch theme\nVisit https://bootswatch.com/sketchy/ to see Bootswatch's demo of the sketchy theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.sketchy)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (sketchy) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.sketchy,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sketchy"
    ]
  },
  {
    "objectID": "reference/theme.sketchy.html#examples",
    "href": "reference/theme.sketchy.html#examples",
    "title": "theme.sketchy",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.sketchy)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sketchy"
    ]
  },
  {
    "objectID": "reference/theme.sketchy.html#attributes",
    "href": "reference/theme.sketchy.html#attributes",
    "title": "theme.sketchy",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sketchy"
    ]
  },
  {
    "objectID": "reference/theme.sketchy.html#returns",
    "href": "reference/theme.sketchy.html#returns",
    "title": "theme.sketchy",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (sketchy) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sketchy"
    ]
  },
  {
    "objectID": "reference/theme.sketchy.html#examples-1",
    "href": "reference/theme.sketchy.html#examples-1",
    "title": "theme.sketchy",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.sketchy,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sketchy"
    ]
  },
  {
    "objectID": "reference/theme.simplex.html",
    "href": "reference/theme.simplex.html",
    "title": "theme.simplex",
    "section": "",
    "text": "theme.simplex\nsimplex Bootswatch theme\nVisit https://bootswatch.com/simplex/ to see Bootswatch's demo of the simplex theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.simplex)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (simplex) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.simplex,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.simplex"
    ]
  },
  {
    "objectID": "reference/theme.simplex.html#examples",
    "href": "reference/theme.simplex.html#examples",
    "title": "theme.simplex",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.simplex)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.simplex"
    ]
  },
  {
    "objectID": "reference/theme.simplex.html#attributes",
    "href": "reference/theme.simplex.html#attributes",
    "title": "theme.simplex",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.simplex"
    ]
  },
  {
    "objectID": "reference/theme.simplex.html#returns",
    "href": "reference/theme.simplex.html#returns",
    "title": "theme.simplex",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (simplex) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.simplex"
    ]
  },
  {
    "objectID": "reference/theme.simplex.html#examples-1",
    "href": "reference/theme.simplex.html#examples-1",
    "title": "theme.simplex",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.simplex,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.simplex"
    ]
  },
  {
    "objectID": "reference/theme_picker_server.html",
    "href": "reference/theme_picker_server.html",
    "title": "theme_picker_server",
    "section": "",
    "text": "theme_picker_server()\nTheme picker - Server\nThis function adds the necessary server logic for the theme picker UI to properly update. Be sure to include theme_picker_ui in your UI definition.\n\n\ndef server(input):\n    shinyswatch.theme_picker_server()\n\n    # The rest of your server logic...\n\n\n\n\ntheme_picker_ui",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_server"
    ]
  },
  {
    "objectID": "reference/theme_picker_server.html#examples",
    "href": "reference/theme_picker_server.html#examples",
    "title": "theme_picker_server",
    "section": "",
    "text": "def server(input):\n    shinyswatch.theme_picker_server()\n\n    # The rest of your server logic...",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_server"
    ]
  },
  {
    "objectID": "reference/theme_picker_server.html#see-also",
    "href": "reference/theme_picker_server.html#see-also",
    "title": "theme_picker_server",
    "section": "",
    "text": "theme_picker_ui",
    "crumbs": [
      "Reference",
      "Theme picker",
      "theme_picker_server"
    ]
  },
  {
    "objectID": "reference/theme.sandstone.html",
    "href": "reference/theme.sandstone.html",
    "title": "theme.sandstone",
    "section": "",
    "text": "theme.sandstone\nsandstone Bootswatch theme\nVisit https://bootswatch.com/sandstone/ to see Bootswatch's demo of the sandstone theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.sandstone)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (sandstone) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.sandstone,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sandstone"
    ]
  },
  {
    "objectID": "reference/theme.sandstone.html#examples",
    "href": "reference/theme.sandstone.html#examples",
    "title": "theme.sandstone",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.sandstone)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sandstone"
    ]
  },
  {
    "objectID": "reference/theme.sandstone.html#attributes",
    "href": "reference/theme.sandstone.html#attributes",
    "title": "theme.sandstone",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sandstone"
    ]
  },
  {
    "objectID": "reference/theme.sandstone.html#returns",
    "href": "reference/theme.sandstone.html#returns",
    "title": "theme.sandstone",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (sandstone) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sandstone"
    ]
  },
  {
    "objectID": "reference/theme.sandstone.html#examples-1",
    "href": "reference/theme.sandstone.html#examples-1",
    "title": "theme.sandstone",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.sandstone,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.sandstone"
    ]
  },
  {
    "objectID": "reference/theme.spacelab.html",
    "href": "reference/theme.spacelab.html",
    "title": "theme.spacelab",
    "section": "",
    "text": "theme.spacelab\nspacelab Bootswatch theme\nVisit https://bootswatch.com/spacelab/ to see Bootswatch's demo of the spacelab theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.spacelab)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (spacelab) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.spacelab,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.spacelab"
    ]
  },
  {
    "objectID": "reference/theme.spacelab.html#examples",
    "href": "reference/theme.spacelab.html#examples",
    "title": "theme.spacelab",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.spacelab)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.spacelab"
    ]
  },
  {
    "objectID": "reference/theme.spacelab.html#attributes",
    "href": "reference/theme.spacelab.html#attributes",
    "title": "theme.spacelab",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.spacelab"
    ]
  },
  {
    "objectID": "reference/theme.spacelab.html#returns",
    "href": "reference/theme.spacelab.html#returns",
    "title": "theme.spacelab",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (spacelab) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.spacelab"
    ]
  },
  {
    "objectID": "reference/theme.spacelab.html#examples-1",
    "href": "reference/theme.spacelab.html#examples-1",
    "title": "theme.spacelab",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.spacelab,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.spacelab"
    ]
  },
  {
    "objectID": "reference/theme.materia.html",
    "href": "reference/theme.materia.html",
    "title": "theme.materia",
    "section": "",
    "text": "theme.materia\nmateria Bootswatch theme\nVisit https://bootswatch.com/materia/ to see Bootswatch's demo of the materia theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.materia)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (materia) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.materia,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.materia"
    ]
  },
  {
    "objectID": "reference/theme.materia.html#examples",
    "href": "reference/theme.materia.html#examples",
    "title": "theme.materia",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.materia)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.materia"
    ]
  },
  {
    "objectID": "reference/theme.materia.html#attributes",
    "href": "reference/theme.materia.html#attributes",
    "title": "theme.materia",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.materia"
    ]
  },
  {
    "objectID": "reference/theme.materia.html#returns",
    "href": "reference/theme.materia.html#returns",
    "title": "theme.materia",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (materia) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.materia"
    ]
  },
  {
    "objectID": "reference/theme.materia.html#examples-1",
    "href": "reference/theme.materia.html#examples-1",
    "title": "theme.materia",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.materia,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.materia"
    ]
  },
  {
    "objectID": "reference/theme.morph.html",
    "href": "reference/theme.morph.html",
    "title": "theme.morph",
    "section": "",
    "text": "theme.morph\nmorph Bootswatch theme\nVisit https://bootswatch.com/morph/ to see Bootswatch's demo of the morph theme.\nThis theme object is a subclass of Theme and can be further customized with the Theme methods. Note that customizing Shiny themes requires the libsass package.\n\n\nShinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.morph)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (morph) theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.morph,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.morph"
    ]
  },
  {
    "objectID": "reference/theme.morph.html#examples",
    "href": "reference/theme.morph.html#examples",
    "title": "theme.morph",
    "section": "",
    "text": "Shinyswatch themes must be provided to the theme argument of any Shiny UI page function, e.g. page_fluid or page_sidebar, or to page_opts in Shiny Express.\nShiny Express\nfrom shiny.express import ui\nimport shinyswatch\n\nui.page_opts(theme=shinyswatch.morph)\nShiny Core\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n    theme=shinyswatch.theme.darkly,\n)\n\n\ndef server(input):\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.morph"
    ]
  },
  {
    "objectID": "reference/theme.morph.html#attributes",
    "href": "reference/theme.morph.html#attributes",
    "title": "theme.morph",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nname\n\nName of the theme.\n\n\ncolors\n\nA class containing the color variables used in the theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.morph"
    ]
  },
  {
    "objectID": "reference/theme.morph.html#returns",
    "href": "reference/theme.morph.html#returns",
    "title": "theme.morph",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nhtmltools.HTMLDependency\nWhen called, returns an HTMLDependency of a full Shiny Bootswatch (morph) theme.",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.morph"
    ]
  },
  {
    "objectID": "reference/theme.morph.html#examples-1",
    "href": "reference/theme.morph.html#examples-1",
    "title": "theme.morph",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(\n        \"Navbar 1\",\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav_panel(\"Plot\", \"Plot content\"),\n    ui.nav_panel(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n    theme=shinyswatch.theme.morph,\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch",
    "crumbs": [
      "Reference",
      "Themes",
      "theme.morph"
    ]
  }
]