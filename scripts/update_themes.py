import importlib
import logging
import os
import shutil
import textwrap
from pathlib import Path

import black
from shiny._versions import bootstrap as version_bootstrap
from shiny.ui import Theme
from shiny.ui._theme_presets import ShinyThemePreset, shiny_theme_presets_bootswatch

type ThemeColors = dict[ShinyThemePreset, dict[str, str]]

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

_root = ""


def load_extra_module(name: str):
    path_this = os.path.dirname(__file__)
    path_that = os.path.join(path_this, f"{name}.py")
    spec = importlib.util.spec_from_file_location(name, path_that)
    that = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(that)
    return that


def find_root(path: str = os.path.dirname(__file__)) -> str:
    global _root
    if _root:
        return _root
    if os.path.exists(os.path.join(path, "setup.cfg")):
        _root = path
        return _root
    next_path = os.path.dirname(path)
    if next_path == path:
        raise FileNotFoundError("Could not find root directory")
    return find_root(next_path)


def here(*args: str) -> str:
    return os.path.join(find_root(), *args)


def clean_bsw5() -> None:
    if os.path.exists(here("shinyswatch", "bs5")):
        logging.info("Cleaning shinyswatch/bs5")
        shutil.rmtree(here("shinyswatch", "bs5"))

    if os.path.exists(here("shinyswatch", "bsw5")):
        logging.info("Cleaning shinyswatch/bsw5")
        shutil.rmtree(here("shinyswatch", "bsw5"))


def theme_colors(presets: tuple[ShinyThemePreset, ...]) -> ThemeColors:
    get_theme_color_values = load_extra_module(
        "get_theme_values"
    ).get_theme_color_values

    colors = {}

    for preset in presets:
        logging.info(f"Getting color values for {preset}")
        theme = Theme(preset)
        colors[preset] = get_theme_color_values(theme)

    return colors


def write_theme(preset: ShinyThemePreset) -> str:
    theme = Theme(preset)
    theme_dir = here("shinyswatch", "bsw5", preset)
    theme_path = os.path.join(theme_dir, "bootswatch.min.css")

    os.makedirs(theme_dir, exist_ok=True)

    logging.info(f"Writing theme {preset} to {os.path.relpath(theme_path)}")

    with open(theme_path, "w") as f:
        f.write(theme.to_css())

    return theme_path


def write_bsw5_py(
    version_bootstrap: str,
    presets: tuple[ShinyThemePreset, ...],
    theme_colors: ThemeColors,
) -> str:
    contents = f"""
        # Do not edit this file, please run `python scripts/update_themes.py`

        from ._typing_extensions import Literal

        bsw5_version = "{version_bootstrap}"

        bsw5_themes = ("{'", "'.join(presets)}",)

        BSW5_THEME_NAME = Literal["{'", "'.join(presets)}",]

        bsw5_theme_colors = {theme_colors!r}
        """

    contents = textwrap.dedent(contents)
    contents = contents.lstrip()
    bs5w_py_path = here("shinyswatch", "_bsw5.py")

    logging.info(f"Writing python file: {os.path.relpath(bs5w_py_path)}")

    with open(bs5w_py_path, "w") as f:
        f.write(contents)

    black_format_file(bs5w_py_path)

    return here("shinyswatch", "_bsw5.py")


def code_theme_preset(preset: ShinyThemePreset) -> str:
    code = f'''
    {preset} = _ShinyswatchTheme("{preset}")
    """
    `{preset}` Bootswatch theme

    Visit [https://bootswatch.com/{preset}/](https://bootswatch.com/{preset}/) to see a Bootswatch's demo of the `{preset}` theme.

    Attributes
    ----------
    name:
        Name of the theme.
    colors:
        A class containing the color variables used in the theme.

    Returns
    -------
    list[htmltools.HTMLDependency]
        List of HTMLDependency objects that create a Bootswatch ({preset}) and Bootstrap 5 theme.
    """
    '''

    code = textwrap.dedent(code)
    code = code.strip()
    return code


def write_theme_py(presets: tuple[ShinyThemePreset, ...]) -> str:
    fn_code = [code_theme_preset(preset) for preset in presets]
    fn_code = "\n\n\n".join(fn_code)

    contents = f'''
# Do not edit this file, please run `python scripts/update_themes.py`

"""
Targeted theme methods for all Bootswatch themes.
"""

from ._theme_utils import ShinyswatchTheme as _ShinyswatchTheme

{fn_code}
'''

    contents = contents.lstrip()

    theme_py_path = here("shinyswatch", "theme.py")

    logging.info(f"Writing python file: {os.path.relpath(theme_py_path)}")
    with open(theme_py_path, "w") as f:
        f.write(contents)

    black_format_file(theme_py_path)

    return theme_py_path


def black_format_file(path: str | Path) -> None:
    black.format_file_in_place(
        Path(path),
        fast=True,
        write_back=black.WriteBack.YES,
        mode=black.FileMode(),
    )


def main():
    clean_bsw5()

    for preset in shiny_theme_presets_bootswatch:
        write_theme(preset)

    write_bsw5_py(
        version_bootstrap,
        shiny_theme_presets_bootswatch,
        theme_colors(shiny_theme_presets_bootswatch),
    )

    write_theme_py(shiny_theme_presets_bootswatch)


if __name__ == "__main__":
    main()
