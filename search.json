[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "shinyswatch",
    "section": "",
    "text": "Bootswatch + Bootstrap 5 themes for Shiny.\nHere are just three of the 25 themes in shinyswatch:\n\n\n\n\n\n\n\n\nMinty\nSketchy\nSuperhero\n\n\n\n\n\n\n\n\n\n\n\n\npip install shinyswatch\nTo install the latest development version from this repository:\npip install https://github.com/rstudio/py-shinyswatch/tarball/main\n\n\n\nTo use a theme, call the theme function and add it to your App’s UI definition.\n# Minty theme\nshinyswatch.theme.minty()\n\n# Sketchy theme\nshinyswatch.theme.sketchy()\n\n# Superhero theme\nshinyswatch.theme.superhero()\nExample Shiny application:\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    shinyswatch.theme.darkly(),\n    # Theme code - end\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nshiny\nshinyswatch"
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "shinyswatch",
    "section": "",
    "text": "pip install shinyswatch\nTo install the latest development version from this repository:\npip install https://github.com/rstudio/py-shinyswatch/tarball/main"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "shinyswatch",
    "section": "",
    "text": "To use a theme, call the theme function and add it to your App’s UI definition.\n# Minty theme\nshinyswatch.theme.minty()\n\n# Sketchy theme\nshinyswatch.theme.sketchy()\n\n# Superhero theme\nshinyswatch.theme.superhero()\nExample Shiny application:\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\n## file: app.py\nfrom shiny import App, Inputs, Outputs, Session, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    shinyswatch.theme.darkly(),\n    # Theme code - end\n    ui.input_slider(\"num\", \"Number:\", min=10, max=100, value=30),\n    ui.output_text_verbatim(\"slider_val\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def slider_val():\n        return f\"{input.num()}\"\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.pulse.html",
    "href": "reference/theme.pulse.html",
    "title": "theme.pulse",
    "section": "",
    "text": "theme.pulse()\npulse Bootswatch theme\nVisit https://bootswatch.com/pulse/ to see a Bootswatch's demo of the pulse theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (pulse) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.pulse(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.pulse.html#returns",
    "href": "reference/theme.pulse.html#returns",
    "title": "theme.pulse",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (pulse) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.pulse.html#examples",
    "href": "reference/theme.pulse.html#examples",
    "title": "theme.pulse",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.pulse(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cerulean.html",
    "href": "reference/theme.cerulean.html",
    "title": "theme.cerulean",
    "section": "",
    "text": "theme.cerulean()\ncerulean Bootswatch theme\nVisit https://bootswatch.com/cerulean/ to see a Bootswatch's demo of the cerulean theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cerulean) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cerulean(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cerulean.html#returns",
    "href": "reference/theme.cerulean.html#returns",
    "title": "theme.cerulean",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cerulean) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.cerulean.html#examples",
    "href": "reference/theme.cerulean.html#examples",
    "title": "theme.cerulean",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cerulean(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.solar.html",
    "href": "reference/theme.solar.html",
    "title": "theme.solar",
    "section": "",
    "text": "theme.solar()\nsolar Bootswatch theme\nVisit https://bootswatch.com/solar/ to see a Bootswatch's demo of the solar theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (solar) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.solar(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.solar.html#returns",
    "href": "reference/theme.solar.html#returns",
    "title": "theme.solar",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (solar) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.solar.html#examples",
    "href": "reference/theme.solar.html#examples",
    "title": "theme.solar",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.solar(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.vapor.html",
    "href": "reference/theme.vapor.html",
    "title": "theme.vapor",
    "section": "",
    "text": "theme.vapor()\nvapor Bootswatch theme\nVisit https://bootswatch.com/vapor/ to see a Bootswatch's demo of the vapor theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (vapor) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.vapor(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.vapor.html#returns",
    "href": "reference/theme.vapor.html#returns",
    "title": "theme.vapor",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (vapor) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.vapor.html#examples",
    "href": "reference/theme.vapor.html#examples",
    "title": "theme.vapor",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.vapor(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.sketchy.html",
    "href": "reference/theme.sketchy.html",
    "title": "theme.sketchy",
    "section": "",
    "text": "theme.sketchy()\nsketchy Bootswatch theme\nVisit https://bootswatch.com/sketchy/ to see a Bootswatch's demo of the sketchy theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sketchy) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sketchy(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.sketchy.html#returns",
    "href": "reference/theme.sketchy.html#returns",
    "title": "theme.sketchy",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sketchy) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.sketchy.html#examples",
    "href": "reference/theme.sketchy.html#examples",
    "title": "theme.sketchy",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sketchy(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.materia.html",
    "href": "reference/theme.materia.html",
    "title": "theme.materia",
    "section": "",
    "text": "theme.materia()\nmateria Bootswatch theme\nVisit https://bootswatch.com/materia/ to see a Bootswatch's demo of the materia theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (materia) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.materia(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.materia.html#returns",
    "href": "reference/theme.materia.html#returns",
    "title": "theme.materia",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (materia) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.materia.html#examples",
    "href": "reference/theme.materia.html#examples",
    "title": "theme.materia",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.materia(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.litera.html",
    "href": "reference/theme.litera.html",
    "title": "theme.litera",
    "section": "",
    "text": "theme.litera()\nlitera Bootswatch theme\nVisit https://bootswatch.com/litera/ to see a Bootswatch's demo of the litera theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (litera) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.litera(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.litera.html#returns",
    "href": "reference/theme.litera.html#returns",
    "title": "theme.litera",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (litera) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.litera.html#examples",
    "href": "reference/theme.litera.html#examples",
    "title": "theme.litera",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.litera(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.minty.html",
    "href": "reference/theme.minty.html",
    "title": "theme.minty",
    "section": "",
    "text": "theme.minty()\nminty Bootswatch theme\nVisit https://bootswatch.com/minty/ to see a Bootswatch's demo of the minty theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (minty) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.minty(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.minty.html#returns",
    "href": "reference/theme.minty.html#returns",
    "title": "theme.minty",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (minty) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.minty.html#examples",
    "href": "reference/theme.minty.html#examples",
    "title": "theme.minty",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.minty(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.simplex.html",
    "href": "reference/theme.simplex.html",
    "title": "theme.simplex",
    "section": "",
    "text": "theme.simplex()\nsimplex Bootswatch theme\nVisit https://bootswatch.com/simplex/ to see a Bootswatch's demo of the simplex theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (simplex) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.simplex(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.simplex.html#returns",
    "href": "reference/theme.simplex.html#returns",
    "title": "theme.simplex",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (simplex) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.simplex.html#examples",
    "href": "reference/theme.simplex.html#examples",
    "title": "theme.simplex",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.simplex(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.united.html",
    "href": "reference/theme.united.html",
    "title": "theme.united",
    "section": "",
    "text": "theme.united()\nunited Bootswatch theme\nVisit https://bootswatch.com/united/ to see a Bootswatch's demo of the united theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (united) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.united(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.united.html#returns",
    "href": "reference/theme.united.html#returns",
    "title": "theme.united",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (united) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.united.html#examples",
    "href": "reference/theme.united.html#examples",
    "title": "theme.united",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.united(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cosmo.html",
    "href": "reference/theme.cosmo.html",
    "title": "theme.cosmo",
    "section": "",
    "text": "theme.cosmo()\ncosmo Bootswatch theme\nVisit https://bootswatch.com/cosmo/ to see a Bootswatch's demo of the cosmo theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cosmo) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cosmo(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cosmo.html#returns",
    "href": "reference/theme.cosmo.html#returns",
    "title": "theme.cosmo",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cosmo) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.cosmo.html#examples",
    "href": "reference/theme.cosmo.html#examples",
    "title": "theme.cosmo",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cosmo(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.morph.html",
    "href": "reference/theme.morph.html",
    "title": "theme.morph",
    "section": "",
    "text": "theme.morph()\nmorph Bootswatch theme\nVisit https://bootswatch.com/morph/ to see a Bootswatch's demo of the morph theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (morph) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.morph(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.morph.html#returns",
    "href": "reference/theme.morph.html#returns",
    "title": "theme.morph",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (morph) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.morph.html#examples",
    "href": "reference/theme.morph.html#examples",
    "title": "theme.morph",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.morph(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cyborg.html",
    "href": "reference/theme.cyborg.html",
    "title": "theme.cyborg",
    "section": "",
    "text": "theme.cyborg()\ncyborg Bootswatch theme\nVisit https://bootswatch.com/cyborg/ to see a Bootswatch's demo of the cyborg theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cyborg) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cyborg(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cyborg.html#returns",
    "href": "reference/theme.cyborg.html#returns",
    "title": "theme.cyborg",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cyborg) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.cyborg.html#examples",
    "href": "reference/theme.cyborg.html#examples",
    "title": "theme.cyborg",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cyborg(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lux.html",
    "href": "reference/theme.lux.html",
    "title": "theme.lux",
    "section": "",
    "text": "theme.lux()\nlux Bootswatch theme\nVisit https://bootswatch.com/lux/ to see a Bootswatch's demo of the lux theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lux) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lux(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lux.html#returns",
    "href": "reference/theme.lux.html#returns",
    "title": "theme.lux",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lux) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.lux.html#examples",
    "href": "reference/theme.lux.html#examples",
    "title": "theme.lux",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lux(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.yeti.html",
    "href": "reference/theme.yeti.html",
    "title": "theme.yeti",
    "section": "",
    "text": "theme.yeti()\nyeti Bootswatch theme\nVisit https://bootswatch.com/yeti/ to see a Bootswatch's demo of the yeti theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (yeti) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.yeti(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.yeti.html#returns",
    "href": "reference/theme.yeti.html#returns",
    "title": "theme.yeti",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (yeti) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.yeti.html#examples",
    "href": "reference/theme.yeti.html#examples",
    "title": "theme.yeti",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.yeti(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.zephyr.html",
    "href": "reference/theme.zephyr.html",
    "title": "theme.zephyr",
    "section": "",
    "text": "theme.zephyr()\nzephyr Bootswatch theme\nVisit https://bootswatch.com/zephyr/ to see a Bootswatch's demo of the zephyr theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (zephyr) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.zephyr(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.zephyr.html#returns",
    "href": "reference/theme.zephyr.html#returns",
    "title": "theme.zephyr",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (zephyr) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.zephyr.html#examples",
    "href": "reference/theme.zephyr.html#examples",
    "title": "theme.zephyr",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.zephyr(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Generic method to retrieve a Bootswatch + Bootstrap 5 theme.\n\n\n\nget_theme\nCreate a Bootswatch and Bootstrap 5 theme for Shiny.\n\n\n\n\n\n\nFunctions to create a specific theme.\n\n\n\ntheme.cerulean\ncerulean Bootswatch theme\n\n\ntheme.cosmo\ncosmo Bootswatch theme\n\n\ntheme.cyborg\ncyborg Bootswatch theme\n\n\ntheme.darkly\ndarkly Bootswatch theme\n\n\ntheme.flatly\nflatly Bootswatch theme\n\n\ntheme.journal\njournal Bootswatch theme\n\n\ntheme.litera\nlitera Bootswatch theme\n\n\ntheme.lumen\nlumen Bootswatch theme\n\n\ntheme.lux\nlux Bootswatch theme\n\n\ntheme.materia\nmateria Bootswatch theme\n\n\ntheme.minty\nminty Bootswatch theme\n\n\ntheme.morph\nmorph Bootswatch theme\n\n\ntheme.pulse\npulse Bootswatch theme\n\n\ntheme.quartz\nquartz Bootswatch theme\n\n\ntheme.sandstone\nsandstone Bootswatch theme\n\n\ntheme.simplex\nsimplex Bootswatch theme\n\n\ntheme.sketchy\nsketchy Bootswatch theme\n\n\ntheme.slate\nslate Bootswatch theme\n\n\ntheme.solar\nsolar Bootswatch theme\n\n\ntheme.spacelab\nspacelab Bootswatch theme\n\n\ntheme.superhero\nsuperhero Bootswatch theme\n\n\ntheme.united\nunited Bootswatch theme\n\n\ntheme.vapor\nvapor Bootswatch theme\n\n\ntheme.yeti\nyeti Bootswatch theme\n\n\ntheme.zephyr\nzephyr Bootswatch theme"
  },
  {
    "objectID": "reference/index.html#get-a-theme",
    "href": "reference/index.html#get-a-theme",
    "title": "Function reference",
    "section": "",
    "text": "Generic method to retrieve a Bootswatch + Bootstrap 5 theme.\n\n\n\nget_theme\nCreate a Bootswatch and Bootstrap 5 theme for Shiny."
  },
  {
    "objectID": "reference/index.html#themes",
    "href": "reference/index.html#themes",
    "title": "Function reference",
    "section": "",
    "text": "Functions to create a specific theme.\n\n\n\ntheme.cerulean\ncerulean Bootswatch theme\n\n\ntheme.cosmo\ncosmo Bootswatch theme\n\n\ntheme.cyborg\ncyborg Bootswatch theme\n\n\ntheme.darkly\ndarkly Bootswatch theme\n\n\ntheme.flatly\nflatly Bootswatch theme\n\n\ntheme.journal\njournal Bootswatch theme\n\n\ntheme.litera\nlitera Bootswatch theme\n\n\ntheme.lumen\nlumen Bootswatch theme\n\n\ntheme.lux\nlux Bootswatch theme\n\n\ntheme.materia\nmateria Bootswatch theme\n\n\ntheme.minty\nminty Bootswatch theme\n\n\ntheme.morph\nmorph Bootswatch theme\n\n\ntheme.pulse\npulse Bootswatch theme\n\n\ntheme.quartz\nquartz Bootswatch theme\n\n\ntheme.sandstone\nsandstone Bootswatch theme\n\n\ntheme.simplex\nsimplex Bootswatch theme\n\n\ntheme.sketchy\nsketchy Bootswatch theme\n\n\ntheme.slate\nslate Bootswatch theme\n\n\ntheme.solar\nsolar Bootswatch theme\n\n\ntheme.spacelab\nspacelab Bootswatch theme\n\n\ntheme.superhero\nsuperhero Bootswatch theme\n\n\ntheme.united\nunited Bootswatch theme\n\n\ntheme.vapor\nvapor Bootswatch theme\n\n\ntheme.yeti\nyeti Bootswatch theme\n\n\ntheme.zephyr\nzephyr Bootswatch theme"
  },
  {
    "objectID": "reference/get_theme.html",
    "href": "reference/get_theme.html",
    "title": "get_theme",
    "section": "",
    "text": "get_theme(name)\nCreate a Bootswatch and Bootstrap 5 theme for Shiny.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nBSW5_THEME_NAME\nA Bootswatch theme name.\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA list of HTML dependencies.\n\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.get_theme(\"superhero\"),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{{input.txt()}}, {{input.slider()}}, {{input.slider()}}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({{\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]}})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/get_theme.html#parameters",
    "href": "reference/get_theme.html#parameters",
    "title": "get_theme",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nBSW5_THEME_NAME\nA Bootswatch theme name.\nrequired"
  },
  {
    "objectID": "reference/get_theme.html#returns",
    "href": "reference/get_theme.html#returns",
    "title": "get_theme",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nA list of HTML dependencies."
  },
  {
    "objectID": "reference/get_theme.html#examples",
    "href": "reference/get_theme.html#examples",
    "title": "get_theme",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.get_theme(\"superhero\"),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{{input.txt()}}, {{input.slider()}}, {{input.slider()}}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({{\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]}})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.quartz.html",
    "href": "reference/theme.quartz.html",
    "title": "theme.quartz",
    "section": "",
    "text": "theme.quartz()\nquartz Bootswatch theme\nVisit https://bootswatch.com/quartz/ to see a Bootswatch's demo of the quartz theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (quartz) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.quartz(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.quartz.html#returns",
    "href": "reference/theme.quartz.html#returns",
    "title": "theme.quartz",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (quartz) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.quartz.html#examples",
    "href": "reference/theme.quartz.html#examples",
    "title": "theme.quartz",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.quartz(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lumen.html",
    "href": "reference/theme.lumen.html",
    "title": "theme.lumen",
    "section": "",
    "text": "theme.lumen()\nlumen Bootswatch theme\nVisit https://bootswatch.com/lumen/ to see a Bootswatch's demo of the lumen theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lumen) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lumen(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lumen.html#returns",
    "href": "reference/theme.lumen.html#returns",
    "title": "theme.lumen",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lumen) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.lumen.html#examples",
    "href": "reference/theme.lumen.html#examples",
    "title": "theme.lumen",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lumen(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.slate.html",
    "href": "reference/theme.slate.html",
    "title": "theme.slate",
    "section": "",
    "text": "theme.slate()\nslate Bootswatch theme\nVisit https://bootswatch.com/slate/ to see a Bootswatch's demo of the slate theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (slate) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.slate(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.slate.html#returns",
    "href": "reference/theme.slate.html#returns",
    "title": "theme.slate",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (slate) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.slate.html#examples",
    "href": "reference/theme.slate.html#examples",
    "title": "theme.slate",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.slate(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.darkly.html",
    "href": "reference/theme.darkly.html",
    "title": "theme.darkly",
    "section": "",
    "text": "theme.darkly()\ndarkly Bootswatch theme\nVisit https://bootswatch.com/darkly/ to see a Bootswatch's demo of the darkly theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (darkly) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.darkly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.darkly.html#returns",
    "href": "reference/theme.darkly.html#returns",
    "title": "theme.darkly",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (darkly) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.darkly.html#examples",
    "href": "reference/theme.darkly.html#examples",
    "title": "theme.darkly",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.darkly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.superhero.html",
    "href": "reference/theme.superhero.html",
    "title": "theme.superhero",
    "section": "",
    "text": "theme.superhero()\nsuperhero Bootswatch theme\nVisit https://bootswatch.com/superhero/ to see a Bootswatch's demo of the superhero theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (superhero) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.superhero(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.superhero.html#returns",
    "href": "reference/theme.superhero.html#returns",
    "title": "theme.superhero",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (superhero) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.superhero.html#examples",
    "href": "reference/theme.superhero.html#examples",
    "title": "theme.superhero",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.superhero(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.spacelab.html",
    "href": "reference/theme.spacelab.html",
    "title": "theme.spacelab",
    "section": "",
    "text": "theme.spacelab()\nspacelab Bootswatch theme\nVisit https://bootswatch.com/spacelab/ to see a Bootswatch's demo of the spacelab theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (spacelab) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.spacelab(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.spacelab.html#returns",
    "href": "reference/theme.spacelab.html#returns",
    "title": "theme.spacelab",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (spacelab) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.spacelab.html#examples",
    "href": "reference/theme.spacelab.html#examples",
    "title": "theme.spacelab",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.spacelab(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.flatly.html",
    "href": "reference/theme.flatly.html",
    "title": "theme.flatly",
    "section": "",
    "text": "theme.flatly()\nflatly Bootswatch theme\nVisit https://bootswatch.com/flatly/ to see a Bootswatch's demo of the flatly theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (flatly) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.flatly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.flatly.html#returns",
    "href": "reference/theme.flatly.html#returns",
    "title": "theme.flatly",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (flatly) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.flatly.html#examples",
    "href": "reference/theme.flatly.html#examples",
    "title": "theme.flatly",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.flatly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.journal.html",
    "href": "reference/theme.journal.html",
    "title": "theme.journal",
    "section": "",
    "text": "theme.journal()\njournal Bootswatch theme\nVisit https://bootswatch.com/journal/ to see a Bootswatch's demo of the journal theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (journal) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.journal(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.journal.html#returns",
    "href": "reference/theme.journal.html#returns",
    "title": "theme.journal",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (journal) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.journal.html#examples",
    "href": "reference/theme.journal.html#examples",
    "title": "theme.journal",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.journal(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.sandstone.html",
    "href": "reference/theme.sandstone.html",
    "title": "theme.sandstone",
    "section": "",
    "text": "theme.sandstone()\nsandstone Bootswatch theme\nVisit https://bootswatch.com/sandstone/ to see a Bootswatch's demo of the sandstone theme.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sandstone) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sandstone(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.sandstone.html#returns",
    "href": "reference/theme.sandstone.html#returns",
    "title": "theme.sandstone",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sandstone) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.sandstone.html#examples",
    "href": "reference/theme.sandstone.html#examples",
    "title": "theme.sandstone",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sandstone(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  }
]